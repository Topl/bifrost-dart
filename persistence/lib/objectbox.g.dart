// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'header_store.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3664607132397035837),
      name: 'ObjectBoxBlockHeader',
      lastPropertyId: const IdUid(13, 5440393938186108912),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5358456951643608238),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 85710295399860715),
            name: 'idBase58',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 7046296754471513199)),
        ModelProperty(
            id: const IdUid(3, 4359215976293910436),
            name: 'parentHeaderIdBase58',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 7982904071071602753)),
        ModelProperty(
            id: const IdUid(4, 943472509132905055),
            name: 'parentSlot',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2240875402453596034),
            name: 'txRoot',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2810280279882837314),
            name: 'bloomFilter',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7880751880541911141),
            name: 'timestamp',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5911719175229829070),
            name: 'height',
            type: 6,
            flags: 8,
            indexId: const IdUid(3, 9177321568921214767)),
        ModelProperty(
            id: const IdUid(9, 4081282826031828307),
            name: 'slot',
            type: 6,
            flags: 8,
            indexId: const IdUid(4, 7785980242825407830)),
        ModelProperty(
            id: const IdUid(10, 5305069945474295606),
            name: 'eligibilityCertificate',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3456973625319493298),
            name: 'operationalCertificate',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 806823708538527002),
            name: 'metadata',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5440393938186108912),
            name: 'address',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 3428022056740544691))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 3664607132397035837),
      lastIndexId: const IdUid(5, 3428022056740544691),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxBlockHeader: EntityDefinition<ObjectBoxBlockHeader>(
        model: _entities[0],
        toOneRelations: (ObjectBoxBlockHeader object) => [],
        toManyRelations: (ObjectBoxBlockHeader object) => {},
        getId: (ObjectBoxBlockHeader object) => object.id,
        setId: (ObjectBoxBlockHeader object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxBlockHeader object, fb.Builder fbb) {
          final idBase58Offset = fbb.writeString(object.idBase58);
          final parentHeaderIdBase58Offset =
              fbb.writeString(object.parentHeaderIdBase58);
          final txRootOffset = fbb.writeListInt8(object.txRoot);
          final bloomFilterOffset = fbb.writeListInt8(object.bloomFilter);
          final eligibilityCertificateOffset =
              fbb.writeListInt8(object.eligibilityCertificate);
          final operationalCertificateOffset =
              fbb.writeListInt8(object.operationalCertificate);
          final metadataOffset = object.metadata == null
              ? null
              : fbb.writeListInt8(object.metadata!);
          final addressOffset = fbb.writeString(object.address);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, idBase58Offset);
          fbb.addOffset(2, parentHeaderIdBase58Offset);
          fbb.addInt64(3, object.parentSlot);
          fbb.addOffset(4, txRootOffset);
          fbb.addOffset(5, bloomFilterOffset);
          fbb.addInt64(6, object.timestamp);
          fbb.addInt64(7, object.height);
          fbb.addInt64(8, object.slot);
          fbb.addOffset(9, eligibilityCertificateOffset);
          fbb.addOffset(10, operationalCertificateOffset);
          fbb.addOffset(11, metadataOffset);
          fbb.addOffset(12, addressOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxBlockHeader(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idBase58: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              parentHeaderIdBase58:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, ''),
              parentSlot:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              txRoot: const fb.Uint8ListReader(lazy: false)
                  .vTableGet(buffer, rootOffset, 12, Uint8List(0)) as Uint8List,
              bloomFilter: const fb.Uint8ListReader(lazy: false)
                  .vTableGet(buffer, rootOffset, 14, Uint8List(0)) as Uint8List,
              timestamp:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              height:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              slot: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              eligibilityCertificate: const fb.Uint8ListReader(lazy: false).vTableGet(buffer, rootOffset, 22, Uint8List(0)) as Uint8List,
              operationalCertificate: const fb.Uint8ListReader(lazy: false).vTableGet(buffer, rootOffset, 24, Uint8List(0)) as Uint8List,
              metadata: const fb.Uint8ListReader(lazy: false).vTableGetNullable(buffer, rootOffset, 26) as Uint8List?,
              address: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxBlockHeader] entity fields to define ObjectBox queries.
class ObjectBoxBlockHeader_ {
  /// see [ObjectBoxBlockHeader.id]
  static final id =
      QueryIntegerProperty<ObjectBoxBlockHeader>(_entities[0].properties[0]);

  /// see [ObjectBoxBlockHeader.idBase58]
  static final idBase58 =
      QueryStringProperty<ObjectBoxBlockHeader>(_entities[0].properties[1]);

  /// see [ObjectBoxBlockHeader.parentHeaderIdBase58]
  static final parentHeaderIdBase58 =
      QueryStringProperty<ObjectBoxBlockHeader>(_entities[0].properties[2]);

  /// see [ObjectBoxBlockHeader.parentSlot]
  static final parentSlot =
      QueryIntegerProperty<ObjectBoxBlockHeader>(_entities[0].properties[3]);

  /// see [ObjectBoxBlockHeader.txRoot]
  static final txRoot =
      QueryByteVectorProperty<ObjectBoxBlockHeader>(_entities[0].properties[4]);

  /// see [ObjectBoxBlockHeader.bloomFilter]
  static final bloomFilter =
      QueryByteVectorProperty<ObjectBoxBlockHeader>(_entities[0].properties[5]);

  /// see [ObjectBoxBlockHeader.timestamp]
  static final timestamp =
      QueryIntegerProperty<ObjectBoxBlockHeader>(_entities[0].properties[6]);

  /// see [ObjectBoxBlockHeader.height]
  static final height =
      QueryIntegerProperty<ObjectBoxBlockHeader>(_entities[0].properties[7]);

  /// see [ObjectBoxBlockHeader.slot]
  static final slot =
      QueryIntegerProperty<ObjectBoxBlockHeader>(_entities[0].properties[8]);

  /// see [ObjectBoxBlockHeader.eligibilityCertificate]
  static final eligibilityCertificate =
      QueryByteVectorProperty<ObjectBoxBlockHeader>(_entities[0].properties[9]);

  /// see [ObjectBoxBlockHeader.operationalCertificate]
  static final operationalCertificate =
      QueryByteVectorProperty<ObjectBoxBlockHeader>(
          _entities[0].properties[10]);

  /// see [ObjectBoxBlockHeader.metadata]
  static final metadata = QueryByteVectorProperty<ObjectBoxBlockHeader>(
      _entities[0].properties[11]);

  /// see [ObjectBoxBlockHeader.address]
  static final address =
      QueryStringProperty<ObjectBoxBlockHeader>(_entities[0].properties[12]);
}
