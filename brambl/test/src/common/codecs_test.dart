import 'dart:math';

import 'package:bifrost_crypto/utils.dart';
import 'package:brambl/brambl.dart';
import 'package:convert/convert.dart';
import 'package:fixnum/fixnum.dart';
import 'package:test/test.dart';
import 'package:topl_protobuf/brambl/models/box/challenge.pb.dart';
import 'package:topl_protobuf/brambl/models/box/lock.pb.dart';
import 'package:topl_protobuf/brambl/models/transaction/io_transaction.pb.dart';
import 'package:topl_protobuf/quivr/models/proposition.pb.dart';

void main() {
  group("Codecs", () {
    test("Lock Immutable Bytes", () {
      final HeightLockOneProposition = Proposition(
          heightRange: Proposition_HeightRange(
              chain: "header", min: Int64.ONE, max: Int64.MAX_VALUE));

      final HeightLockOneChallenge =
          Challenge(revealed: HeightLockOneProposition);

      final HeightLockOneLock = Lock(
          predicate: Lock_Predicate(
              challenges: [HeightLockOneChallenge], threshold: 1));

      final lockImmutableBytes = HeightLockOneLock.immutable;
      final expectedLockImmutableBytes = hex
          .decode("01006865696768745f72616e6765686561646572017fffffffffffffff");

      expect(lockImmutableBytes.value.sameElements(expectedLockImmutableBytes),
          true);

      final evidence = HeightLockOneLock.evidence32.digest.value;
      final expectedEvidence = hex.decode(
          "03f981636e19ec936600002af2e444590bd1626bbe2c8e2fe69df5ab48ac6a74");

      expect(evidence.sameElements(expectedEvidence), true);
    });
    test("IoTransaction1 Codecs", () async {
      final transaction = IoTransaction.fromBuffer(hex.decode(
          "0a9b020a2822260a240a220a20aee11f29bb4faa0db4f20342838f500012772c041f390d1d0237db6920bb3aa412e5010ae2010a8b010a040a020a000a360a3412320a0a626c616b65326232353612240a220a2007b755fa23ba526eea5a9e1243c237c90a37d1092008595f1d7486b51c0c6cb50a310a2f1a2d0a076564323535313912220a20850ccf7083e9ee04c7d2abed044ca5adf52addd5d2448cb65e20012bd9128eef0a0e0a0c220a0a0668656164657218640a060a042a021064100312020a00122622240a221220d583f81cfb5e458ca30d769a97cffcbf2885f2b5fb7cdc5cd371f031e0c5f13112262a240a2212202fc9dd55455a71e3db9cc45b14f5320149928314fc28ba315b4704ab6001193a1a070a050a030a010112330a281a260a240a220a2006f989df0c7ed7c67cb4596bb3ca977fdf2689ff9fca7766d1ca224a863d3c8912070a050a030a01011a160a140a06080310321864220a0a086d65746164617461"));
      final expectedImmutableBytes = hex.decode(
          "00000000696f5f7472616e73616374696f6e5f3332aee11f29bb4faa0db4f20342838f500012772c041f390d1d0237db6920bb3aa403006c6f636b656401646967657374626c616b65326232353607b755fa23ba526eea5a9e1243c237c90a37d1092008595f1d7486b51c0c6cb5026469676974616c5f7369676e617475726565643235353139850ccf7083e9ee04c7d2abed044ca5adf52addd5d2448cb65e20012bd9128eef036865696768745f72616e67656865616465720064047469636b5f72616e676500640001d583f81cfb5e458ca30d769a97cffcbf2885f2b5fb7cdc5cd371f031e0c5f131022fc9dd55455a71e3db9cc45b14f5320149928314fc28ba315b4704ab6001193a01000000626f785f6c6f636b5f333206f989df0c7ed7c67cb4596bb3ca977fdf2689ff9fca7766d1ca224a863d3c890103326d65746164617461");
      final immutableBytes = transaction.immutable;
      expect(expectedImmutableBytes.sameElements(immutableBytes.value), true);

      final withoutProofs = transaction.withoutProofs;
      final expectedWithoutProofs = IoTransaction.fromBuffer(hex.decode(
          "0ac7010a2822260a240a220a20aee11f29bb4faa0db4f20342838f500012772c041f390d1d0237db6920bb3aa41291010a8e010a8b010a040a020a000a360a3412320a0a626c616b65326232353612240a220a2007b755fa23ba526eea5a9e1243c237c90a37d1092008595f1d7486b51c0c6cb50a310a2f1a2d0a076564323535313912220a20850ccf7083e9ee04c7d2abed044ca5adf52addd5d2448cb65e20012bd9128eef0a0e0a0c220a0a0668656164657218640a060a042a02106410031a070a050a030a010112330a281a260a240a220a2006f989df0c7ed7c67cb4596bb3ca977fdf2689ff9fca7766d1ca224a863d3c8912070a050a030a01011a160a140a06080310321864220a0a086d65746164617461"));

      expect(withoutProofs, expectedWithoutProofs);

      final expectedEvidenceBytes = hex.decode(
          "9f3912628e0fcea03cc28eefba35722b1edae7fe2d82972e06c48c6663705e6a");
      final evidenceBytes = (await transaction.evidence32).digest.value;
      expect(expectedEvidenceBytes.sameElements(evidenceBytes), true);
    });
    test("IoTransaction2 Codecs", () async {
      final transaction = IoTransaction.fromBuffer(hex.decode(
          "12360a281a260a240a220a2003f981636e19ec936600002af2e444590bd1626bbe2c8e2fe69df5ab48ac6a74120a0a080a060a040098968012590a281a260a240a220a20725cd2b862b8771f3489299adc87f4e08c44b0e85995d2238cf94e72913d5a2d122d122b0a050a030f424012220a20e99281a9669c1e519338bda348f04ec00ef4b96828ac50d4ddb0e9c37005537212ab070a281a260a240a220a20725cd2b862b8771f3489299adc87f4e08c44b0e85995d2238cf94e72913d5a2d12fe0622fb060ad4060a96030a20f262bc2a13cb94c513034c24538ae747397f758bffcec402e29dfe5b8f83a8b2124011d26a48f90f3fc47a06b3f4dc289ef89cd07edd4184522adcca1d20f5e9ae088a8d7bb7cb1f71e53c3d9a4db5bd4b7ef07f13a0b70b9c9cdcd54b6860d7dd0e1a201813b40b53625964ffbdffb9e96c9a994dd12da016a5e18f5736094e199136721a20e12c805ef677e7161b547772c70dace17ed69585645dc7daac26c6a6695ac6e01a2043c7f333affa7a2beb49897789dcf74b0e7c014edffdccaedad2423cc52866421a2049167721d3dfca37f98279d0bb6d8c4fdbca0eaae1c6180a2300ebf1093648541a2037747dcd94888a3dd30e43268882c246f73b9120476c94623236dc36972c19af1a20bd90657b81629fd0535aca7ecf0791315b7d657b50b6125772f02926c0d617b61a20d448ad2f43e914c1c700d1a0606d5854fd5d490c86f365d1c22657f19e5801c51a2048e7cc89919a7c5d0c6b6d41484fd3791076fcd127be5dfb6995d147afbc59b71a2094dc93b194ec3ee89e1a1813f89bf2f7cf1984f0736cf9d0ad07b23b2db586a91296030a204b40ee952536b2917d2107fdf83fd9f9c20912bbef811e2967671ebc474e47ce124008c51d68f295f7f92fb12ce1eed926c35765ac9dc71fc258519fadcf35e35eef4a28aa5aefaf61eab9ba1eaf656b2a77194604b2fcbad7d81d0b986488d2da041a20dd5e9921348dc528ab4bdb27ef7af6669a719007317a300ee052aab24fba35d21a202b473e30f455ad2a8be230734e9da55b3e771a89acdcbc56c8aee8925a205abf1a20018fa6d7c4f5282ae2a820d796362e083e5ac32c401e62f79fbfac89ad26a2c91a20b9c6b0ea27d17ef9fd9476d0d8e97c515f6b8fb93abb4a27b17765ac0f069d8c1a2017bd6cf346a7b9abeeeddc8a4f5f4216d86cd62cc7588d7b7cd5b355090068601a209178a3e83c56249d2e7d786a74b4bc881bd64ca20981efca16ff64da63d875441a2016708e08de486691df4ef7c53fafb3b180a434da4cf0cda880430f06d5c9b4451a20f89323ec286a59d6e2246ba00ec5c554935d9e6320ca7ce69eda67be48e9ab461a20e479fd6d1954970c9e651bd361fe07ad251d8c8cd227835f44f9f41761d398161a20a531b1c5a8bdfe9eb0033618ba059f14dce17d9d736dbd5807aef10949c533f612220a20e99281a9669c1e519338bda348f04ec00ef4b96828ac50d4ddb0e9c3700553721a0d0a0b0a0718a6a2cee8f6302200"));
      final expectedImmutableBytes = hex.decode(
          "000000626f785f6c6f636b5f333203f981636e19ec936600002af2e444590bd1626bbe2c8e2fe69df5ab48ac6a7400989680010000626f785f6c6f636b5f3332725cd2b862b8771f3489299adc87f4e08c44b0e85995d2238cf94e72913d5a2d0f4240e99281a9669c1e519338bda348f04ec00ef4b96828ac50d4ddb0e9c370055372020000626f785f6c6f636b5f3332725cd2b862b8771f3489299adc87f4e08c44b0e85995d2238cf94e72913d5a2df262bc2a13cb94c513034c24538ae747397f758bffcec402e29dfe5b8f83a8b211d26a48f90f3fc47a06b3f4dc289ef89cd07edd4184522adcca1d20f5e9ae088a8d7bb7cb1f71e53c3d9a4db5bd4b7ef07f13a0b70b9c9cdcd54b6860d7dd0e001813b40b53625964ffbdffb9e96c9a994dd12da016a5e18f5736094e1991367201e12c805ef677e7161b547772c70dace17ed69585645dc7daac26c6a6695ac6e00243c7f333affa7a2beb49897789dcf74b0e7c014edffdccaedad2423cc52866420349167721d3dfca37f98279d0bb6d8c4fdbca0eaae1c6180a2300ebf1093648540437747dcd94888a3dd30e43268882c246f73b9120476c94623236dc36972c19af05bd90657b81629fd0535aca7ecf0791315b7d657b50b6125772f02926c0d617b606d448ad2f43e914c1c700d1a0606d5854fd5d490c86f365d1c22657f19e5801c50748e7cc89919a7c5d0c6b6d41484fd3791076fcd127be5dfb6995d147afbc59b70894dc93b194ec3ee89e1a1813f89bf2f7cf1984f0736cf9d0ad07b23b2db586a94b40ee952536b2917d2107fdf83fd9f9c20912bbef811e2967671ebc474e47ce08c51d68f295f7f92fb12ce1eed926c35765ac9dc71fc258519fadcf35e35eef4a28aa5aefaf61eab9ba1eaf656b2a77194604b2fcbad7d81d0b986488d2da0400dd5e9921348dc528ab4bdb27ef7af6669a719007317a300ee052aab24fba35d2012b473e30f455ad2a8be230734e9da55b3e771a89acdcbc56c8aee8925a205abf02018fa6d7c4f5282ae2a820d796362e083e5ac32c401e62f79fbfac89ad26a2c903b9c6b0ea27d17ef9fd9476d0d8e97c515f6b8fb93abb4a27b17765ac0f069d8c0417bd6cf346a7b9abeeeddc8a4f5f4216d86cd62cc7588d7b7cd5b35509006860059178a3e83c56249d2e7d786a74b4bc881bd64ca20981efca16ff64da63d875440616708e08de486691df4ef7c53fafb3b180a434da4cf0cda880430f06d5c9b44507f89323ec286a59d6e2246ba00ec5c554935d9e6320ca7ce69eda67be48e9ab4608e479fd6d1954970c9e651bd361fe07ad251d8c8cd227835f44f9f41761d39816a531b1c5a8bdfe9eb0033618ba059f14dce17d9d736dbd5807aef10949c533f6e99281a9669c1e519338bda348f04ec00ef4b96828ac50d4ddb0e9c3700553720000");
      final immutableBytes = transaction.immutable.value;

      final badIndices = <int>[];
      for (var i = 0;
          i < (min(expectedImmutableBytes.length, immutableBytes.length));
          i++) {
        if (expectedImmutableBytes[i] != immutableBytes[i]) {
          badIndices.add(i);
        }
      }

      expect(expectedImmutableBytes.sameElements(immutableBytes), true);

      final expectedEvidenceBytes = hex.decode(
          "0ed8c732fb1d1d572ed4bd7d419045b18984df3cdc73f30a152179719a398ba8");
      final evidenceBytes = (await transaction.evidence32).digest.value;
      expect(expectedEvidenceBytes.sameElements(evidenceBytes), true);
    });
  });
}
